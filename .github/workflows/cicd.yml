name: CICD

on:
  push:
    branches: [ main ]

jobs:

  build:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.3

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get short SHA
      id: slug
      run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"

    - name: Get todays date
      id: today
      run: echo "::set-output name=date::$(date -I)"

    - name: Get todays time
      id: time
      run: echo "::set-output name=time::$(date +'%T')"

#    - name: Get dependencies
#      run: go get -v -t -d ./...

#    - name: Build
#      run: |
#        mkdir out
#        cd cmd/stg
#        GOOS=linux GOARCH=amd64 go build -v -o ../../out/stg-linux .
#        GOOS=darwin GOARCH=amd64 go build -v -o ../../out/stg-mac .
#        GOOS=windows GOARCH=amd64 go build -v -o ../../out/stg-win.exe .
#        cd ../..
#        cd out
#        chmod +x stg-linux
#        chmod +x stg-mac

    - name: Test
      run: |
        cd pkg
        go test -race ./...
        
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v2
      with:
        version: latest
        args: release --rm-dist --snapshot
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#    - name: Create Release
#      id: create_release
#      uses: actions/create-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        tag_name: v${{ steps.today.outputs.date }}-${{ steps.slug.outputs.sha8 }}
#        release_name: Release v${{ steps.today.outputs.date }}-${{ steps.time.outputs.time }}-${{ steps.slug.outputs.sha8 }}
#        draft: false
#        prerelease: false
#
#    - name: Upload Linux Release Asset
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }}
#        asset_path: ./out/stg-linux
#        asset_name: stg-linux
#        asset_content_type: application/octet-stream
#
#    - name: Upload MacOS Release Asset
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }}
#        asset_path: ./out/stg-mac
#        asset_name: stg-mac
#        asset_content_type: application/octet-stream
#
#    - name: Upload Windows Release Asset
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }}
#        asset_path: ./out/stg-win.exe
#        asset_name: 'stg-win.exe'
#        asset_content_type: application/octet-stream
